"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_klaxit_cookie-consent_src_index_js"],{

/***/ "./node_modules/@klaxit/cookie-consent/src/checkbox.js":
/*!*************************************************************!*\
  !*** ./node_modules/@klaxit/cookie-consent/src/checkbox.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Checkbox)
/* harmony export */ });
/*
 * This document includes material copied from or derived from
 * https://www.w3.org/TR/wai-aria-practices/examples/checkbox/checkbox-1/js/checkbox.js
 * Copyright © 2015 W3C® (MIT, ERCIM, Keio, Beihang).
 *
 */

class Checkbox {

  constructor(domNode) {
    this.domNode = domNode;

    this.keyCode = Object.freeze({
      "RETURN": 13,
      "SPACE": 32
    });
  }

  init() {
    this.domNode.tabIndex = 0;

    if (!this.domNode.getAttribute("aria-checked")) {
      this.domNode.setAttribute("aria-checked", "false");
    }

    this.domNode.addEventListener("keydown", this.handleKeydown.bind(this));
    this.domNode.addEventListener("click", this.handleClick.bind(this));
    this.domNode.addEventListener("focus", this.handleFocus.bind(this));
    this.domNode.addEventListener("blur", this.handleBlur.bind(this));

  }

  toggleCheckbox() {
    if (this.domNode.getAttribute("aria-disabled") === "true") {
      return;
    }

    if (this.domNode.getAttribute("aria-checked") === "true") {
      this.domNode.setAttribute("aria-checked", "false");
    }
    else {
      this.domNode.setAttribute("aria-checked", "true");
    }
  }

  /* EVENT HANDLERS */

  handleKeydown(event) {
    let flag = false;

    switch (event.keyCode) {
      case this.keyCode.SPACE:
        this.toggleCheckbox();
        flag = true;
        break;

      default:
        break;
    }

    if (flag) {
      event.stopPropagation();
      event.preventDefault();
    }
  }

  handleClick() {
    this.toggleCheckbox();
  }

  handleFocus() {
    this.domNode.classList.add("focus");
  }

  handleBlur() {
    this.domNode.classList.remove("focus");
  }
}


/***/ }),

/***/ "./node_modules/@klaxit/cookie-consent/src/consent_box.html.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@klaxit/cookie-consent/src/consent_box.html.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (`
<div class="cc-container cc-noselect">
  <div class="cc-box">
    <div class="cc-title">
      <!-- Title goes here -->
    </div>
    <div class="cc-section-landing">
      <div class="cc-description cc-content">
        <!-- Description goes here -->
      </div>
      <div class="cc-buttons">
        <div class="cc-btn cc-btn-settings cc-btn-show-settings">
          <!-- Cookie settings button -->
        </div>
        <div class="cc-btn cc-btn-reject">
          <!-- Reject button -->
        </div>
        <div class="cc-btn cc-btn-accept cc-btn-accept-all">
          <!-- Accept button -->
        </div>
      </div>
    </div>
    <div class="cc-section-settings cc-hidden">
      <div class="cc-content">
        <div class="cc-categories cc-checkboxes">
          <!-- Category checkboxes go here -->
        </div>
        <div class="cc-category-description">
          <!-- Category description go here -->
        </div>
      </div>
      <div class="cc-buttons">
        <div class="cc-btn cc-btn-settings cc-btn-hide-settings">
          <!-- Hide button -->
        </div>
        <div class="cc-btn cc-btn-reject">
          <!-- Reject button -->
        </div>
        <div class="cc-btn cc-btn-accept cc-btn-accept-selected">
          <!-- Accept Cookies button -->
        </div>
      </div>
    </div>
  </div>
</div>
`.trim());

/***/ }),

/***/ "./node_modules/@klaxit/cookie-consent/src/consent_box.js":
/*!****************************************************************!*\
  !*** ./node_modules/@klaxit/cookie-consent/src/consent_box.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ConsentBox)
/* harmony export */ });
/* harmony import */ var _consent_box_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./consent_box.html */ "./node_modules/@klaxit/cookie-consent/src/consent_box.html.js");
/* harmony import */ var _checkbox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./checkbox */ "./node_modules/@klaxit/cookie-consent/src/checkbox.js");
/* harmony import */ var _observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./observable */ "./node_modules/@klaxit/cookie-consent/src/observable.js");


;



class ConsentBox extends _observable__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor( options = {} ){
    super()

    this.options = options
    this.categories = this.options.categories

    this._build()

    document.body.appendChild(this.container)
  }

  open(){
    this.container.classList.add("displayed");
  }

  close(){
    this.container.classList.remove("displayed");
  }

  selectedCategories(){
    const categoriesElem = this._firstByClass("cc-categories")
    const selectedCategories = []

    for (let catKey in this.categories) {
      const catElem = categoriesElem.querySelector(
        "[data-category='" + catKey + "']"
      )
      if(catElem.getAttribute("aria-checked") == "true") {
        selectedCategories.push(catKey)
      }
    }

    return selectedCategories
  }

  _build(){
    // Build container & content
    const elemBuilder = document.createElement("div")
    elemBuilder.innerHTML = _consent_box_html__WEBPACK_IMPORTED_MODULE_0__["default"]
    this.container = elemBuilder.firstChild

    this._firstByClass("cc-title").innerHTML = this.options.title;
    this._firstByClass("cc-description").innerHTML = this.options.description;
    this._firstByClass("cc-btn-accept-all").innerHTML = this.options.buttons.acceptAll;
    this._firstByClass("cc-btn-accept-selected").innerHTML = this.options.buttons.acceptSelected;
    this._firstByClass("cc-btn-show-settings").innerHTML = this.options.buttons.showSettings;
    this._firstByClass("cc-btn-hide-settings").innerHTML = this.options.buttons.hideSettings;

    const rejectBtns = this._allByClass("cc-btn-reject")
    for(let i=0; i < rejectBtns.length; i++){
      rejectBtns[i].innerHTML = this.options.buttons.reject;
    }

    this._buildCategories()
    this._setupButtons()
  }

  _buildCategories(){
    const categoriesElem = this._firstByClass("cc-categories")

    for (let catKey in this.categories) {
      const category = this.categories[catKey]

      const categoryElem = document.createElement("div")
      categoryElem.setAttribute("data-category", catKey)
      categoryElem.setAttribute("role", "checkbox")
      categoryElem.setAttribute("tabindex", "0")

      const categoryLbl = document.createElement("span")
      categoryLbl.setAttribute("data-category", catKey)
      categoryLbl.setAttribute("role", "link")
      categoryLbl.setAttribute("tabindex", "0")
      const lblNode = document.createTextNode(category.label)
      categoryLbl.appendChild(lblNode)

      categoryElem.appendChild(categoryLbl)

      categoriesElem.appendChild(categoryElem)

      categoryElem.addEventListener("click", this._categoryClicked.bind(this))

      if (category.checked) {
        categoryElem.setAttribute("aria-checked", "true")
        this._categoryClicked({target: categoryElem})
      }
      if (category.mandatory) {
        categoryElem.setAttribute("aria-disabled", "true")
      }
    }

    this._initCheckBoxes();
  }

  _initCheckBoxes() {
    const checkboxes = this.container.querySelectorAll("[role='checkbox']");
    for (let i = 0; i < checkboxes.length; i++) {
      new _checkbox__WEBPACK_IMPORTED_MODULE_1__["default"](checkboxes[i]).init();
    }
  }

  _categoryClicked(event) {
    const targetElement = event.target || event.srcElement;
    const targetCatKey = targetElement.dataset.category

    const descElem = this._firstByClass("cc-category-description")
    descElem.innerHTML = this.categories[targetCatKey].description
  }

  _setupButtons() {
    // Settings buttons
    this.container.querySelectorAll(".cc-btn-settings")
                  .forEach((elem) => {
      elem.addEventListener("click", this._toggleSettings.bind(this))
    })

    // Accept buttons
    this.container.querySelectorAll(".cc-btn-accept-all")
        .forEach((elem) => {
      elem.addEventListener("click", () => this.emit("accept-all"))
    })
    this.container.querySelectorAll(".cc-btn-accept-selected")
                  .forEach((elem) => {
      elem.addEventListener("click", () => this.emit("accept-selected"))
    })

    // Reject buttons
    this.container.querySelectorAll(".cc-btn-reject")
                  .forEach((elem) => {
      elem.addEventListener("click", () => this.emit("reject"))
    })
  }

  _toggleSettings() {
    const landingClassList = this._firstByClass("cc-section-landing").classList;
    const settingsClassList = this._firstByClass("cc-section-settings").classList;

    if(landingClassList.contains("cc-hidden")) {
      landingClassList.remove("cc-hidden")
      settingsClassList.add("cc-hidden")
    } else {
      landingClassList.add("cc-hidden")
      settingsClassList.remove("cc-hidden")
    }
  }


  _firstByClass(className){
    return this._allByClass(className)[0]
  }

  _allByClass(className){
    const elems = this.container.getElementsByClassName(className)
    if (elems.length > 0) { return elems }

    throw "Cannot find elements for class " + className + ".";
  }
}

/***/ }),

/***/ "./node_modules/@klaxit/cookie-consent/src/cookie.js":
/*!***********************************************************!*\
  !*** ./node_modules/@klaxit/cookie-consent/src/cookie.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Cookie)
/* harmony export */ });


const DEFAULT_STATUS = null
const DEFAULT_ACCEPTED_CATEGORIES = []
class Cookie {
  constructor(cookieOptions) {
    this.cookieOptions = cookieOptions
    this.load()
  }

  dump() {
    const serialized = JSON.stringify({
      status: this.status,
      acceptedCategories: this.acceptedCategories
    })

    let cookieStr = this.cookieOptions.name + "=" + serialized

    const expDate = new Date()
    const expDays = this.cookieOptions.expiryDays
    const expHours = (typeof expDays !== "number"  ? 365 : expDays ) * 24
    expDate.setHours(expDate.getHours() + expHours)
    cookieStr += "; expires=" + expDate.toUTCString()

    cookieStr += "; path=/"
    cookieStr += (this.cookieOptions.domain ? "; domain=" + this.cookieOptions.domain : "")
    cookieStr += (this.cookieOptions.secure ? "; secure" : "")
    cookieStr += (this.cookieOptions.sameSite ? "; SameSite=" +  this.cookieOptions.sameSite : "")

    document.cookie = cookieStr
  }

  load() {
    const existingConsent = this._getCookie(this.cookieOptions.name)
    if(existingConsent){
      const parsed = JSON.parse(existingConsent)
      this.status = parsed.status
      this.acceptedCategories = parsed.acceptedCategories
    } else {
      this.status = DEFAULT_STATUS
      this.acceptedCategories = DEFAULT_ACCEPTED_CATEGORIES
    }
  }

  _getCookie(cookieName) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${cookieName}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
  }
}

// Make default values public.
Object.defineProperties(Cookie, {
  DEFAULT_STATUS: { value: DEFAULT_STATUS, writable: false },
  DEFAULT_ACCEPTED_CATEGORIES: { value: DEFAULT_ACCEPTED_CATEGORIES, writable: false }
})


/***/ }),

/***/ "./node_modules/@klaxit/cookie-consent/src/cookie_consent.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@klaxit/cookie-consent/src/cookie_consent.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CookieConsent)
/* harmony export */ });
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _default_options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./default_options */ "./node_modules/@klaxit/cookie-consent/src/default_options.js");
/* harmony import */ var _consent_box__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./consent_box */ "./node_modules/@klaxit/cookie-consent/src/consent_box.js");
/* harmony import */ var _cookie__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cookie */ "./node_modules/@klaxit/cookie-consent/src/cookie.js");
/* harmony import */ var _observable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./observable */ "./node_modules/@klaxit/cookie-consent/src/observable.js");


;






// There is only one event source which is shared between
// instance and class. Emit is only accesible at the instance
// level however.
const SharedEmitter = new (events__WEBPACK_IMPORTED_MODULE_0___default())()

class CookieConsent extends _observable__WEBPACK_IMPORTED_MODULE_4__["default"] {
  constructor( options = {} ){
    // Since there must only be one instance (one consent box),
    // we will indicate user that it is not OK to create many
    // instances. Because of the option Object that may vary,
    // we cannot just return original instance, users would be
    // confused.
    if (CookieConsent._instance) {
      console.warn("CookieConsent already created, returning the original instance.")
      return CookieConsent._instance
    }
    super(CookieConsent._emitter)
    CookieConsent._instance = this


    this.options = Object.assign(_default_options__WEBPACK_IMPORTED_MODULE_1__["default"], options)
    this._consentBox = new _consent_box__WEBPACK_IMPORTED_MODULE_2__["default"](this.options)
    this._cookie = new _cookie__WEBPACK_IMPORTED_MODULE_3__["default"](this.options.cookie)

    this._consentBox.on("accept-all", () => {
      this._consentBox.close()
      this._cookie.status = "accepted"
      this._cookie.acceptedCategories = Object.keys(this.options.categories)
      this._cookie.dump()
      this.emit("accept")
      this.emit("change")
    })

    this._consentBox.on("accept-selected", () => {
      this._consentBox.close()
      this._cookie.status = "accepted"
      this._cookie.acceptedCategories = this._consentBox.selectedCategories()
      this._cookie.dump()
      this.emit("accept")
      this.emit("change")
    })

    this._consentBox.on("reject", () => {
      this._consentBox.close()
      this._cookie.status = "rejected"
      this._cookie.acceptedCategories = []
      this._cookie.dump()
      this.emit("reject")
      this.emit("change")
    })

    if (!this._cookie.status) {
      this._consentBox.open()
    }
  }

  open () {
    this._consentBox.open()
  }

  emit (event) {
    super.emit(event, this)
  }

  get status () {
    return this._cookie.status
  }

  get acceptedCategories () {
    return this._cookie.acceptedCategories
  }
}

// Static level properties, since class level static properties are still a
// proposal, we use Object.defineProperties.
Object.defineProperties(CookieConsent, {
  open: {
    value() {
      if (!this._instance) throw new Error("You must initialize a CookieConsent instance before opening.")

      this._instance.open()
    }
  },
  status: {
    get() { return this._instance ? this._instance.status : _cookie__WEBPACK_IMPORTED_MODULE_3__["default"].DEFAULT_STATUS }
  },
  acceptedCategories: {
    get() { return this._instance ? this._instance.acceptedCategories : _cookie__WEBPACK_IMPORTED_MODULE_3__["default"].DEFAULT_ACCEPTED_CATEGORIES }
  },
  on: {
    value: SharedEmitter.on.bind(SharedEmitter)
  }
})


/***/ }),

/***/ "./node_modules/@klaxit/cookie-consent/src/default_options.js":
/*!********************************************************************!*\
  !*** ./node_modules/@klaxit/cookie-consent/src/default_options.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  // Title of the
  title: "We use cookies",

  description: `Click “Accept” to enable us to use cookies to personalize
                this site. Customize your preferences in your
                Cookie Settings or click “Reject” if you do not want us
                to use cookies for this purpose. Learn more in our
                <a href="/cookies">Cookie Notice</a>.`,

  buttons: {
    acceptAll: "Accept",
    acceptSelected: "Accept Cookies",
    reject: "Reject",
    showSettings: "Cookies settings",
    hideSettings: "Hide",
  },

  categories: {
    essentials: {
			label: "Essential",
      description: `Essential cookies are necessary for features which
                    are essential to your use of our site or services,
                    such as account login, authentication, and site security.`,
      checked: true,
      mandatory: true
		},
		analytics: {
			label: "Analytics",
      description: `Analytics cookies allow us to analyze your visits and
                    actions on our websites, and offer you a more relevant
                    experience.`
		}
  },

  cookie: {
    // Name of the cookie storing the consent state
    name: "cookie_consent",

    // If null, will take `location.hostname` by default
    domain: null,

    // Duration of the consent
    expiryDays: 365,

    // If true, the cookies will only be allowed over https
    secure: false,

    // See https://developer.mozilla.org/fr/docs/Web/HTTP/Headers/Set-Cookie/SameSite
    sameSite: "Lax",
  }
});

/***/ }),

/***/ "./node_modules/@klaxit/cookie-consent/src/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@klaxit/cookie-consent/src/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _styles_main_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/main.scss */ "./node_modules/@klaxit/cookie-consent/src/styles/main.scss");
/* harmony import */ var _cookie_consent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cookie_consent */ "./node_modules/@klaxit/cookie-consent/src/cookie_consent.js");


;



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_cookie_consent__WEBPACK_IMPORTED_MODULE_1__["default"]);

window.CookieConsent = _cookie_consent__WEBPACK_IMPORTED_MODULE_1__["default"]


/***/ }),

/***/ "./node_modules/@klaxit/cookie-consent/src/observable.js":
/*!***************************************************************!*\
  !*** ./node_modules/@klaxit/cookie-consent/src/observable.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Observable)
/* harmony export */ });
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);


;

class Observable {
  constructor(emitter = null) {
    this._emitter = emitter || new (events__WEBPACK_IMPORTED_MODULE_0___default())()
  }

  on() { this._emitter.on.apply(this._emitter, arguments)}
  emit() { this._emitter.emit.apply(this._emitter, arguments)}
}


/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "./node_modules/@klaxit/cookie-consent/src/styles/main.scss":
/*!******************************************************************!*\
  !*** ./node_modules/@klaxit/cookie-consent/src/styles/main.scss ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,